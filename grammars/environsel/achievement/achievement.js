// Generated automatically by nearley
// http://github.com/Hardmath123/nearley
(function () {
function id(x) {return x[0]; }
var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "wicketpos", "symbols": ["numpos", "aftern"]},
    {"name": "wicketpos", "symbols": ["numpos", "ws", "aftern"]},
    {"name": "wicketpos", "symbols": ["alphapos"]},
    {"name": "numpos", "symbols": [/[1-9]/]},
    {"name": "numpos$string$1", "symbols": [{"literal":"1"}, {"literal":"0"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "numpos", "symbols": ["numpos$string$1"]},
    {"name": "aftern$string$1", "symbols": [{"literal":"s"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "aftern", "symbols": ["aftern$string$1"]},
    {"name": "aftern$string$2", "symbols": [{"literal":"n"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "aftern", "symbols": ["aftern$string$2"]},
    {"name": "aftern$string$3", "symbols": [{"literal":"r"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "aftern", "symbols": ["aftern$string$3"]},
    {"name": "aftern$string$4", "symbols": [{"literal":"t"}, {"literal":"h"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "aftern", "symbols": ["aftern$string$4"]},
    {"name": "alphapos$string$1", "symbols": [{"literal":"f"}, {"literal":"i"}, {"literal":"r"}, {"literal":"s"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "alphapos", "symbols": ["alphapos$string$1"]},
    {"name": "alphapos$string$2", "symbols": [{"literal":"s"}, {"literal":"e"}, {"literal":"c"}, {"literal":"o"}, {"literal":"n"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "alphapos", "symbols": ["alphapos$string$2"]},
    {"name": "alphapos$string$3", "symbols": [{"literal":"t"}, {"literal":"h"}, {"literal":"i"}, {"literal":"r"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "alphapos", "symbols": ["alphapos$string$3"]},
    {"name": "alphapos$string$4", "symbols": [{"literal":"f"}, {"literal":"o"}, {"literal":"u"}, {"literal":"r"}, {"literal":"t"}, {"literal":"h"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "alphapos", "symbols": ["alphapos$string$4"]},
    {"name": "alphapos$string$5", "symbols": [{"literal":"f"}, {"literal":"i"}, {"literal":"f"}, {"literal":"t"}, {"literal":"h"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "alphapos", "symbols": ["alphapos$string$5"]},
    {"name": "alphapos$string$6", "symbols": [{"literal":"s"}, {"literal":"i"}, {"literal":"x"}, {"literal":"t"}, {"literal":"h"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "alphapos", "symbols": ["alphapos$string$6"]},
    {"name": "alphapos$string$7", "symbols": [{"literal":"s"}, {"literal":"e"}, {"literal":"v"}, {"literal":"e"}, {"literal":"n"}, {"literal":"t"}, {"literal":"h"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "alphapos", "symbols": ["alphapos$string$7"]},
    {"name": "alphapos$string$8", "symbols": [{"literal":"e"}, {"literal":"i"}, {"literal":"g"}, {"literal":"h"}, {"literal":"t"}, {"literal":"h"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "alphapos", "symbols": ["alphapos$string$8"]},
    {"name": "alphapos$string$9", "symbols": [{"literal":"n"}, {"literal":"i"}, {"literal":"n"}, {"literal":"t"}, {"literal":"h"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "alphapos", "symbols": ["alphapos$string$9"]},
    {"name": "alphapos$string$10", "symbols": [{"literal":"t"}, {"literal":"e"}, {"literal":"n"}, {"literal":"t"}, {"literal":"h"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "alphapos", "symbols": ["alphapos$string$10"]},
    {"name": "alphapos$string$11", "symbols": [{"literal":"l"}, {"literal":"a"}, {"literal":"s"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "alphapos", "symbols": ["alphapos$string$11"]},
    {"name": "ws", "symbols": [{"literal":" "}]},
    {"name": "ws", "symbols": [{"literal":" "}, "ws"]},
    {"name": "achievement", "symbols": ["wickettakerstring"]},
    {"name": "achievement$subexpression$1", "symbols": [/[rR]/, /[uU]/, /[nN]/, {"literal":" "}, /[gG]/, /[eE]/, /[tT]/, /[tT]/, /[eE]/, /[rR]/], "postprocess": function (d) {return d.join(""); }},
    {"name": "achievement", "symbols": ["achievement$subexpression$1"]},
    {"name": "achievement$subexpression$2", "symbols": [/[sS]/, /[cC]/, /[oO]/, /[rR]/, /[eE]/, /[rR]/], "postprocess": function (d) {return d.join(""); }},
    {"name": "achievement", "symbols": ["achievement$subexpression$2"]},
    {"name": "achievement$subexpression$3", "symbols": [/[rR]/, /[uU]/, /[nN]/, /[sS]/], "postprocess": function (d) {return d.join(""); }},
    {"name": "achievement", "symbols": ["achievement$subexpression$3"]},
    {"name": "achievement$subexpression$4", "symbols": [/[wW]/, /[iI]/, /[cC]/, /[kK]/, /[eE]/, /[tT]/, /[sS]/], "postprocess": function (d) {return d.join(""); }},
    {"name": "achievement", "symbols": ["achievement$subexpression$4"]},
    {"name": "achievement$subexpression$5", "symbols": [/[fF]/, /[iI]/, /[fF]/, /[tT]/, /[iI]/, /[eE]/, /[sS]/], "postprocess": function (d) {return d.join(""); }},
    {"name": "achievement", "symbols": ["achievement$subexpression$5"]},
    {"name": "achievement$subexpression$6", "symbols": [/[cC]/, /[eE]/, /[nN]/, /[tT]/, /[uU]/, /[rR]/, /[iI]/, /[eE]/, /[sS]/], "postprocess": function (d) {return d.join(""); }},
    {"name": "achievement", "symbols": ["achievement$subexpression$6"]},
    {"name": "achievement$subexpression$7", "symbols": [/[sS]/, /[cC]/, /[oO]/, /[rR]/, /[eE]/], "postprocess": function (d) {return d.join(""); }},
    {"name": "achievement", "symbols": ["achievement$subexpression$7"]},
    {"name": "achievement$subexpression$8", "symbols": [/[sS]/, /[cC]/, /[oO]/, /[rR]/, /[eE]/, /[rR]/, /[sS]/], "postprocess": function (d) {return d.join(""); }},
    {"name": "achievement", "symbols": ["achievement$subexpression$8"]},
    {"name": "achievement", "symbols": ["partnership"]},
    {"name": "partnership", "symbols": ["partnershipstring"]},
    {"name": "partnership", "symbols": ["nthwicket", "ws", "partnershipstring"]},
    {"name": "nthwicket$string$1", "symbols": [{"literal":"w"}, {"literal":"i"}, {"literal":"c"}, {"literal":"k"}, {"literal":"e"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "nthwicket", "symbols": ["wicketpos", "ws", "nthwicket$string$1"]},
    {"name": "partnershipstring$subexpression$1", "symbols": [/[pP]/, /[aA]/, /[rR]/, /[tT]/, /[nN]/, /[eE]/, /[rR]/, /[sS]/, /[hH]/, /[iI]/, /[pP]/], "postprocess": function (d) {return d.join(""); }},
    {"name": "partnershipstring", "symbols": ["partnershipstring$subexpression$1"]},
    {"name": "partnershipstring$subexpression$2", "symbols": [/[pP]/, /[aA]/, /[rR]/, /[tT]/, /[nN]/, /[eE]/, /[rR]/, /[sS]/, /[hH]/, /[iI]/, /[pP]/, /[sS]/], "postprocess": function (d) {return d.join(""); }},
    {"name": "partnershipstring", "symbols": ["partnershipstring$subexpression$2"]},
    {"name": "wickettakerstring$subexpression$1", "symbols": [/[wW]/, /[iI]/, /[cC]/, /[kK]/, /[eE]/, /[tT]/, {"literal":" "}, /[tT]/, /[aA]/, /[kK]/, /[eE]/, /[rR]/], "postprocess": function (d) {return d.join(""); }},
    {"name": "wickettakerstring", "symbols": ["wickettakerstring$subexpression$1"]},
    {"name": "wickettakerstring$subexpression$2", "symbols": [/[wW]/, /[iI]/, /[cC]/, /[kK]/, /[eE]/, /[tT]/, {"literal":" "}, /[tT]/, /[aA]/, /[kK]/, /[eE]/, /[rR]/, /[sS]/], "postprocess": function (d) {return d.join(""); }},
    {"name": "wickettakerstring", "symbols": ["wickettakerstring$subexpression$2"]},
    {"name": "ws", "symbols": [{"literal":" "}]},
    {"name": "ws", "symbols": [{"literal":" "}, "ws"]}
]
  , ParserStart: "achievement"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
